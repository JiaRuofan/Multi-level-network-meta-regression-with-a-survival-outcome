
#################DGP


library(MASS)
library(survival)

ns<-2 #Number of studies
nt<-3 #Number of treatments
n_cov<-5 #Number of covariates

n_AB<-200 #sample size of each study
n_AC<-200

beta1<-c(0.1,0.1,-0.1,0.1,-0.1)
beta2<-c(-0.2,0.2,-0.2,-0.2,0.2)
gammaB<--1.2
gammaC<--0.5
eta1<-0.8
eta2<-1.2
mu1<-6.2
mu2<-5.8
shape1<-eta1
shape2<-eta2

#Sample size in each treatment
n1_A<-n_AB/2;n1_B<-n_AB/2;n2_A<-n_AC/2;n2_C<-n_AC/2; 


#Generate the covariates
sigma=diag(1,5)
sigma[1,2]<-sigma[2,1]<-sigma[3,2]<-sigma[2,3]<-0.5
sigma[1,3]<-0.1
x_AB<-cbind(mvrnorm(n_AB,mu=rep(0,3),sigma),rgamma(n_AB,4,2),rbinom(n_AB,1,0.2))
sigma=diag(1,5)
sigma[1,2]<-sigma[2,1]<-sigma[3,2]<-sigma[2,3]<-0.5
sigma[1,3]<-0.1
x_AC<-cbind(mvrnorm(n_AC,mu=rep(0.5,3),sigma),rgamma(n_AC,6,2),rbinom(n_AC,1,0.7))  
    
scale1<-1/c(mu1^(1/eta1)*exp((x_AB[1:(n_AB/2),]%*%(beta1))/eta1),mu1^(1/eta1)*exp((x_AB[(n_AB/2+1):(n_AB),]%*%(beta1+beta2)+gammaB)/eta1))
scale2<-1/c(mu2^(1/eta2)*exp((x_AC[1:(n_AC/2),]%*%(beta1))/eta2),mu2^(1/eta2)*exp((x_AC[(n_AC/2+1):(n_AC),]%*%(beta1+beta2)+gammaC)/eta2))


#Generate t    
t1<-c()
for (i in 1:n_AB){
      
     t1[i]<-rweibull(1,shape=shape1,scale=scale1[i])
}
    
    
t2<-c()
for (i in 1:n_AC){
      
      t2[i]<-rweibull(1,shape=shape2,scale=scale2[i])
}
    

#Censoring
t1_censored<-c()
delta1<-c()
    
for (i in 1:n_AB){
      if (t1[i]>0.6){
        t1_censored[i]<-0.6
        delta1[i]<-0
      }else{
        t1_censored[i]<-t1[i]
        delta1[i]<-1
      }
}

    
t2_censored<-c()
delta2<-c()
    
for (i in 1:n_AC){
      if (t2[i]>0.45){
        t2_censored[i]<-0.45
        delta2[i]<-0
      }else{
        t2_censored[i]<-t2[i]
        delta2[i]<-1
      }
    }

#transform to data frame
x_AB<-as.data.frame(x_AB)
colnames(x_AB)<-c('x1','x2','x3','x4','x5')
x_AC<-as.data.frame(x_AC)
colnames(x_AC)<-c('x1','x2','x3','x4','x5')


###########MAIC

#install.packages('maic')
library(maic)

data_AB<-cbind(rep(0,n1_A),rep(0,n1_B),x_AB)
colnames(data_AB)<-c('tr',colnames(x_AB))

target <- c("x1_mean" = mean(x_AC[,1]),
                "x2_mean" = mean(x_AC[,2]),
                "x3_mean" = mean(x_AC[,3]),
                "x4_mean" = mean(x_AC[,4]),
                "x5_mean" = mean(x_AC[,5]))
                
dict <- data.frame(
      "match.id" =
        c("x1", "x2",
          "x3", "x4", "x5"),
      "target.variable" =
        c("x1_mean", "x2_mean","x3_mean","x4_mean","x5_mean"),
      "index.variable" =
        c("x1", "x2",
          "x3",
          "x4",
          "x5"),
      "match.type" =
        c("mean", "mean", "mean", "mean", "mean"),
      stringsAsFactors = FALSE)
      
ipmat <- createMAICInput(
      index = x_AB,
      target = target,
      dictionary = dict,
      matching.variables =
        c("x1", "x2",
          "x3", "x4", "x5"))
          
wts <- maicWeight(ipmat)

x_AB<-as.matrix(x_AB)
fre_res1<-coxph(Surv(t1_censored,delta1)~x_AB*c(rep(0,n_AB/2),rep(1,n_AB/2)),weights = wts)

#Note this is usually reported in AgD
x_AC<-as.matrix(x_AC)
fre_res2<-coxph(Surv(t2_censored,delta2)~x_AC*c(rep(0,n_AC/2),rep(1,n_AC/2)))

#Tha hazard ratio of C and B:
exp(fre_res2$coefficients[6]-fre_res1$coefficients[6])

################NMA

#install.packages('survminer')
#install.packages('survivalnma')
library(survminer)
library(survivalnma)
\end{lstlisting}

\noindent The input is the estimated K-M curve. Here we directly calculate the K-M curve based on IPD. For AgD with K-M curves, we can extract the needed points from the reported K-M curves. Section 5 will introduce how to do this.

\begin{lstlisting}
 fit <- survfit(Surv(t1_censored[1:(n_AB/2)],delta1[1:(n_AB/2)]) ~ 1)
  
  d <- data.frame(time = fit$time,
                  n.risk = fit$n.risk,
                  n.event = fit$n.event
  )
  
  write.table(d,'D://survival//NMA//simu//samplesize//ln//s6//n400//s1t1.txt')
  
  fit <- survfit(Surv(t1_censored[(n_AB/2+1):n_AB],delta1[(n_AB/2+1):n_AB]) ~ 1)
  
  d <- data.frame(time = fit$time,
                  n.risk = fit$n.risk,
                  n.event = fit$n.event
  )
  
  write.table(d,'D://survival//NMA//simu//samplesize//ln//s6//n400//s1t2.txt')
  
  
  
  
  fit <- survfit(Surv(t2_censored[1:(n_AC/2)],delta2[1:(n_AC/2)]) ~ 1)
  
  d <- data.frame(time = fit$time,
                  n.risk = fit$n.risk,
                  n.event = fit$n.event
  )
  
  write.table(d,'D://survival//NMA//simu//samplesize//ln//s6//n400//s2t1.txt')
  
  fit <- survfit(Surv(t2_censored[(n_AC/2+1):n_AC],delta2[(n_AC/2+1):n_AC]) ~ 1)
  
  d <- data.frame(time = fit$time,
                  n.risk = fit$n.risk,
                  n.event = fit$n.event
  )
  
  write.table(d,'D://survival//NMA//simu//samplesize//ln//s6//n400//s2t3.txt')

nma_df <- data.frame(
    stringsAsFactors = FALSE,
    "treatment" = c("A", "B","A",  "C"),
    "study" = c("Study 1", "Study 1", "Study 2", "Study 2"),
    "baseline" = c("A", "A", "A", "A"),
    "filepath" = c("D://survival//NMA//simu//samplesize//ln//s6//n400//s1t1.txt",
                   "D://survival//NMA//simu//samplesize//ln//s6//n400//s1t2.txt",
                   "D://survival//NMA//simu//samplesize//ln//s6//n400//s2t1.txt",
                   "D://survival//NMA//simu//samplesize//ln//s6//n400//s2t3.txt"))
  
fit_wbl <- survnma(nma_df, model="weibull",bugs.directory = 

"D://winbugs//WinBUGS14",min_time_change = 0.000001) 

#fit_wbl$fit$mean stores the estimates of parameters; 
#fit_wbl$fit$sims.matrix stores the posterior samples


######################ML-NMR

cov_simu5<-function(x_dat,cor_refer,n_simu){
  n_cov<-dim(x_dat)[2]
  x1_mean<-mean(x_dat[,1])
  x1_var<-var(x_dat[,1])
  x2_mean<-mean(x_dat[,2])
  x2_var<-var(x_dat[,2])
  x3_mean<-mean(x_dat[,3])
  x3_var<-var(x_dat[,3])
 
  x4_mean<-mean(x_dat[,4])
  x4_var<-var(x_dat[,4])
 
  x5_p<-x5_mean<-mean(x_dat[,5])
 
  x4_scale<-x4_var/x4_mean
  x4_shape<-x4_mean/x4_scale
 
  ## Initialization and parameters
  P <- cor_refer
  d <- nrow(P)                             # Dimension
  n_simu <- n_simu                                 # Number of samples
 
  ## Simulation (non-vectorized version)
  A <- t(chol(P))
  U <- matrix(nrow = n_simu, ncol = d)
  for (i in 1:n_simu){
    Z      <- rnorm(d)
    X      <- A%*%Z
    U[i, ] <- pnorm(X)
  }
 
  ## Simulation (compact vectorized version)
  U <- pnorm(matrix(rnorm(n_simu*d), ncol = d) %*% chol(P))
 
  X_simu<-matrix(0,nrow=n_simu,ncol=n_cov)
 
  for (i in 1:n_simu){
    X_simu[i,1]<-qnorm(U[i,1],x1_mean,sqrt(x1_var))
    X_simu[i,2]<-qnorm(U[i,2],x2_mean,sqrt(x2_var))
    X_simu[i,3]<-qnorm(U[i,3],x3_mean,sqrt(x3_var))
    X_simu[i,4]<-qgamma(U[i,4],x4_shape,scale=x4_scale)
    X_simu[i,5]<-ifelse(U[i,5]<x5_p,1,0)
  }
  return(X_simu)
}

ns=2
n_cov=5
nt=3
n_ipd=1
n_agd=1
type='weibull_median'

n_simu=10000 #sample size of simulated X
burnin<-20000
nloop<-10000

x1_A<-x_AB[1:(n_AB/2),]
x1_B<-x_AB[(n_AB/2+1):n_AB,]

x2_A<-x_AC[1:(n_AC/2),]
x2_C<-x_AC[(n_AC/2+1):n_AC,]

t1_A<-t1_censored[1:n1_A]
t1_B<-t1_censored[(n1_A+1):(n1_A+n1_B)]

delta1_A<-delta1[1:n1_A]
delta1_B<-delta1[(n1_A+1):(n1_A+n1_B)]

#Simulate X for AgD
n2_simu_A<-n_simu;n2_simu_C<-n_simu;
X2_simu_A<-cov_simu5(x2_A,cor(x_AB),n2_simu_A);X2_simu_C<-cov_simu5(x2_C,cor(x_AB),n2_simu_C)

 n_list<-list()
  n_list[[1]]<-list()
  n_list[[1]][[1]]<-n1_A
  n_list[[1]][[2]]<-n1_B
  n_list[[2]]<-list()
  n_list[[2]][[1]]<-n2_A
  n_list[[2]][[3]]<-n2_C

 
  X_list<-list()
  X_list[[1]]<-list()
  X_list[[1]][[1]]<-x1_A
  X_list[[1]][[2]]<-x1_B
  X_list[[2]]<-list()
  X_list[[2]][[1]]<-X2_simu_A
  X_list[[2]][[3]]<-X2_simu_C

  n_simu_list<-list()
  n_simu_list[[2]]<-list()
  n_simu_list[[2]][[1]]<-n2_simu_A
  n_simu_list[[2]][[3]]<-n2_simu_C

 
  t_list<-list()
  t_list[[1]]<-list()
  t_list[[2]]<-list()
  t_list[[1]][[1]]<-t1_A
  t_list[[1]][[2]]<-t1_B
  t_list[[2]][[1]]<-mean(t2[1:n2_A])
  t_list[[2]][[3]]<-mean(t2[(n2_A+1):(n2_A+n2_C)])

 
  delta_list<-list()
  delta_list[[1]]<-list()
  delta_list[[1]][[1]]<-delta1_A
  delta_list[[1]][[2]]<-delta1_B
 
  tr_list<-list()
  tr_list[[1]]<-c(1,2)
  tr_list[[2]]<-c(1,3)
 
  st_list<-list()
  st_list[[1]]<-c(1,2,3,4)
  st_list[[2]]<-c(1)
  st_list[[3]]<-c(2)

ns=2
n_cov=5
nt=3
n_ipd=1
n_agd=1
type='logn'

n_simu=10000 #sample size of simulated X
burnin<-20000
nloop<-10000

#take log
t1_censored<-log(t1_censored)

#separate censored samples and non-censored samples
t1_A_ncensored<-t1_censored[1:(n_AB/2)][which(delta1[1:(n_AB/2)]==1)]
t1_A_censored<-t1_censored[1:(n_AB/2)][which(delta1[1:(n_AB/2)]==0)]

t1_B_ncensored<-t1_censored[(n_AB/2+1):n_AB][which(delta1[(n_AB/2+1):n_AB]==1)]
t1_B_censored<-t1_censored[(n_AB/2+1):n_AB][which(delta1[(n_AB/2+1):n_AB]==0)]

x1_A_ncen<-x_AB[which(delta1[1:(n_AB/2)]==1),]
x1_A_cen<-x_AB[which(delta1[1:(n_AB/2)]==0),]
x1_B_ncen<-x_AB[(n_AB/2+1):n_AB,][which(delta1[(n_AB/2+1):n_AB]==1),]
x1_B_cen<-x_AB[(n_AB/2+1):n_AB,][which(delta1[(n_AB/2+1):n_AB]==0),]

x2_A<-x_AC[1:(n_AC/2),]
x2_C<-x_AC[(n_AC/2+1):n_AC,]

n1_A_ncen<-length(t1_A_ncensored);n1_A_cen<-length(t1_A_censored)
n1_B_ncen<-length(t1_B_ncensored);n1_B_cen<-length(t1_B_censored)


#Simulate X for AgD
n2_simu_A<-n_simu;n2_simu_C<-n_simu;
X2_simu_A<-cov_simu5(x2_A,cor(x_AB),n2_simu_A);X2_simu_C<-cov_simu5(x2_C,cor(x_AB),n2_simu_C)

n_list<-list()
n_list[[1]]<-list()
n_list[[1]][[1]]<-list()
n_list[[1]][[2]]<-list()
n_list[[1]][[1]][[1]]<-n1_A_ncen
n_list[[1]][[1]][[2]]<-n1_A_cen
n_list[[1]][[2]][[1]]<-n1_B_ncen
n_list[[1]][[2]][[2]]<-n1_B_cen
n_list[[2]]<-list()
n_list[[2]][[1]]<-n2_A
n_list[[2]][[3]]<-n2_C



X_list<-list()
X_list[[1]]<-list()
X_list[[1]][[1]]<-list()
X_list[[1]][[2]]<-list()
X_list[[1]][[1]][[1]]<-x1_A_ncen
X_list[[1]][[1]][[2]]<-x1_A_cen
X_list[[1]][[2]][[1]]<-x1_B_ncen
X_list[[1]][[2]][[2]]<-x1_B_cen
X_list[[2]]<-list()
X_list[[2]][[1]]<-X2_simu_A
X_list[[2]][[3]]<-X2_simu_C


n_simu_list<-list()
n_simu_list[[2]]<-list()
n_simu_list[[2]][[1]]<-n2_simu_A
n_simu_list[[2]][[3]]<-n2_simu_C



t_list<-list()
t_list[[1]]<-list()
t_list[[2]]<-list()
t_list[[1]][[1]]<-list()
t_list[[1]][[2]]<-list()
t_list[[1]][[1]][[1]]<-t1_A_ncensored
t_list[[1]][[1]][[2]]<-t1_A_censored
t_list[[1]][[2]][[1]]<-t1_B_ncensored
t_list[[1]][[2]][[2]]<-t1_B_censored
t_list[[2]][[1]]<-mean(log(t2[1:n2_A]))
t_list[[2]][[3]]<-mean(log(t2[(n2_A+1):(n2_A+n2_C)]))

 
  tr_list<-list()
  tr_list[[1]]<-c(1,2)
  tr_list[[2]]<-c(1,3)
 
  st_list<-list()
  st_list[[1]]<-c(1,2,3,4)
  st_list[[2]]<-c(1)
  st_list[[3]]<-c(2)
